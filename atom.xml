<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tlhg&#39;s Blog|</title>
  
  <subtitle>tlhg</subtitle>
  <link href="http://tlhg.top/atom.xml" rel="self"/>
  
  <link href="http://tlhg.top/"/>
  <updated>2021-06-17T10:03:36.267Z</updated>
  <id>http://tlhg.top/</id>
  
  <author>
    <name>Heisenberg Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信电脑版多开、防撤回破解</title>
    <link href="http://tlhg.top/posts/d40c.html"/>
    <id>http://tlhg.top/posts/d40c.html</id>
    <published>2021-04-26T07:32:42.000Z</published>
    <updated>2021-06-17T10:03:36.267Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;网上有一堆 微信电脑版多开、防撤回等&lt;strong&gt;破解补丁&lt;/strong&gt;，可以实现类似的功能，但是微信是比较&lt;strong&gt;涉及个人隐私&lt;/strong&gt;的社交软件，所以网上公开的补丁基本都不敢用，&lt;strong&gt;万一自带木马后门&lt;/strong&gt;什么的就惨了。所以在这里教大家纯手工修改方法。&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#准备工作&quot;&gt;&lt;/a&gt; 准备工作&lt;/h1&gt;
&lt;p&gt;1. OllyDbg 或 OllyICE(OllyDbg 爱好者二次开发升级版本) 等反汇编软件。&lt;/p&gt;
&lt;p&gt;2. 安装好微信电脑版，提取安装路径文件夹中的 WeChatWin.dll 备用。&lt;/p&gt;
&lt;p&gt;使用 OllyDbg 纯手工修改微信电脑版 WeChatWin.dll 的汇编代码，&lt;strong&gt;实现无限多开和消息防撤回功能&lt;/strong&gt;，并且有撤回提示。&lt;/p&gt;
&lt;p&gt;该方法适用于微信电脑版（Windows PC 版）近几年的所有版本，甚至未来新版本。&lt;/p&gt;
&lt;p&gt;有一定的技术门槛，需要了解基本的反汇编破解知识，如果不能熟练掌握 OllyDbg 等反汇编软件，那么底下内容就可以不用看了。&lt;/p&gt;
&lt;h1 id=&quot;破解流程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#破解流程&quot;&gt;&lt;/a&gt; 破解流程&lt;/h1&gt;
&lt;h2 id=&quot;解除多开限制&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解除多开限制&quot;&gt;&lt;/a&gt; 解除多开限制&lt;/h2&gt;</summary>
    
    
    
    <category term="Reverse" scheme="http://tlhg.top/categories/Reverse/"/>
    
    
    <category term="Crack" scheme="http://tlhg.top/tags/Crack/"/>
    
  </entry>
  
  <entry>
    <title>注册表</title>
    <link href="http://tlhg.top/posts/aecd.html"/>
    <id>http://tlhg.top/posts/aecd.html</id>
    <published>2021-02-08T13:31:14.000Z</published>
    <updated>2021-02-10T14:32:17.588Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;注册表的打开与关闭&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#注册表的打开与关闭&quot;&gt;&lt;/a&gt; 注册表的打开与关闭&lt;/h1&gt;
&lt;p&gt;注册表是一个巨大的树形结构。操作一般都是打开某个子键。子键下有若干个值可以获得。每一个值有一个名字。值有不同的类型。一般需要查询才能获得其类型。&lt;/p&gt;
&lt;p&gt;应用程序编程：需要提供一个根子键的句柄。&lt;/p&gt;
&lt;p&gt;驱动：全部用路径表示。&lt;/p&gt;
&lt;p&gt;应用编程中对应的子键 驱动编程中的路径写法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;HKEY_LOCAL_MACHINE&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;\Registry\Machine&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HKEY_USERS&lt;/td&gt;
&lt;td&gt;\Registry\User&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HKEY_CLASSES_ROOT&lt;/td&gt;
&lt;td&gt;没有对应的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HKEY_CURRENT_USER&lt;/td&gt;
&lt;td&gt;没有简单的对应路径，但是可以求得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;实际上应用程序和驱动程序很大的一个不同在于应用程序总是由某个“当前用户”启动的。因此可以直接读取HKEY_CLASSES_ROOT和HKEY_CURRENT_USER。而驱动程序和用户无关，所以直接去打开HKEY_CURRENT_USER也就不符合逻辑了。&lt;/p&gt;
&lt;p&gt;打开注册表键使用函数ZwOpenKey。新建或者打开则使用ZwCreateKey。一般在驱动编程中，使用ZwOpenKey的情况比较多见。&lt;/p&gt;
&lt;h2 id=&quot;zwopenkey-函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#zwopenkey-函数&quot;&gt;&lt;/a&gt; &lt;strong&gt;ZwOpenKey&lt;/strong&gt; 函数&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ZwOpenKey&lt;/strong&gt; 函数（打开注册表键），函数原型如下：&lt;/p&gt;</summary>
    
    
    
    <category term="kernel" scheme="http://tlhg.top/categories/kernel/"/>
    
    
    <category term="kernel programm" scheme="http://tlhg.top/tags/kernel-programm/"/>
    
  </entry>
  
  <entry>
    <title>对象与句柄</title>
    <link href="http://tlhg.top/posts/d839.html"/>
    <id>http://tlhg.top/posts/d839.html</id>
    <published>2021-02-08T11:37:11.000Z</published>
    <updated>2021-02-08T13:08:01.866Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;句柄的定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#句柄的定义&quot;&gt;&lt;/a&gt; 句柄的定义&lt;/h1&gt;
&lt;p&gt;每个进程都有一个表，这个表中的每一项保存着需要访问的内核对象信息，系统为用户态应用程序提供一个“句柄”值，这个句柄值实际上是这个表的某种索引，通过这个值，可以在表中定位到具体需要访问的内核对象信息。用户态程序通过API创建或打开一个内核对象时，这个表中的信息会增加一项，用来描述这个内核对象的信息，并产生一个相应的句柄值，用户态程序把这个句柄传递到相应API，API进入内核后，通过这个句柄值定位到需要操作的内核对象，对内核对象进行相应的操作。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *HANDLE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; HANDLE *PHANDLE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;内核对象的引用计数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内核对象的引用计数&quot;&gt;&lt;/a&gt; 内核对象的引用计数&lt;/h1&gt;
&lt;p&gt;每个内核对象存在两个计数，一个称为“句柄计数”，另一个称为“指针计数”，句柄计数是指这个内核对象被多少个句柄值所指向，如在用户态中创建一个命名的EVENT对象，获取到一个句柄，那么这个EVENT的句柄计数就是1，当其他程序通过该EVENT名字打开该EVENT时，会获取到另外一个句柄，这时候，句柄计数等于2。指针计数是在句柄计数基础上递增的计数，在刚才所提的例子中，句柄计数等于2，指针计数也等于2，句柄计数的增加，会相应导致指针计数增加，同理，句柄计数的减少，会相应导致指针计数减少，但指针计数可以独立增加与减少而不影响句柄计数。当一个对象的指针计数等于0的时候，这个对象会被系统释放。请注意，不同操作系统，系统对引用计数值的管理稍有不同。&lt;/p&gt;
&lt;h1 id=&quot;句柄操作code&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#句柄操作code&quot;&gt;&lt;/a&gt; 句柄操作CODE&lt;/h1&gt;
&lt;h2 id=&quot;code&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#code&quot;&gt;&lt;/a&gt; ＣＯＤＥ&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;ntddk.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;ntifs.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOLEAN &lt;span class=&quot;title function_&quot;&gt;EventOperationSample&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	BOOLEAN bSucc = FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HANDLE	hCreateEvent = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PVOID	pCrateEventObject = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HANDLE	hOpenEvent = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PVOID	pOpenEventObject = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		OBJECT_ATTRIBUTES ObjAttr = { &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; };&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		UNICODE_STRING uNameString = { &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; };&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		RtlInitUnicodeString(&amp;amp;uNameString, &lt;span class=&quot;string&quot;&gt;L&quot;\\BaseNameObjects\\TestEvent&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		InitializeObjectAttributes(&amp;amp;ObjAttr, &amp;amp;uNameString, OBJ_KERNEL_HANDLE | OBJ_CASE_INSENSITIVE, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ZwCreateEvent(&amp;amp;hCreateEvent, EVENT_ALL_ACCESS, &amp;amp;ObjAttr, SynchronizationEvent, FALSE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hCreateEvent == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ObReferenceObjectByHandle(hCreateEvent, EVENT_ALL_ACCESS, *ExEventObjectType, KernelMode, &amp;amp;pCrateEventObject, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hOpenEvent == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ObReferenceObjectByHandle(hOpenEvent, EVENT_ALL_ACCESS, *ExEventObjectType, KernelMode, &amp;amp;pCrateEventObject, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pOpenEventObject == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DbgPrint(&lt;span class=&quot;string&quot;&gt;&quot;Create Handle: %p, Create Pointer = %p\n&quot;&lt;/span&gt;, hCreateEvent, pCrateEventObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DbgPrint(&lt;span class=&quot;string&quot;&gt;&quot;Open Handle: %p, Open Pointer = %p\n&quot;&lt;/span&gt;, hOpenEvent, pOpenEventObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		bSucc = TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	} &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (FALSE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pCrateEventObject != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ObDereferenceObject(pCrateEventObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pCrateEventObject = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hCreateEvent != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ZwClose(hCreateEvent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		hCreateEvent = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pOpenEventObject != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ObDereferenceObject(pOpenEventObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pOpenEventObject = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hOpenEvent != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ZwClose(hOpenEvent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		hOpenEvent = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bSucc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;逻辑分析&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#逻辑分析&quot;&gt;&lt;/a&gt; 逻辑分析&lt;/h2&gt;
&lt;p&gt;ZwCreateEvent成功后，句柄会保存在hCreateEvent变量中，这个句柄是一个内核句柄。接着代码中调用ObReferenceObåjectByHandle函数，获取hCreateEvent句柄对应的EVENT对象指针。&lt;/p&gt;</summary>
    
    
    
    <category term="kernel" scheme="http://tlhg.top/categories/kernel/"/>
    
    
    <category term="kernel programm" scheme="http://tlhg.top/tags/kernel-programm/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ volatile</title>
    <link href="http://tlhg.top/posts/16c1.html"/>
    <id>http://tlhg.top/posts/16c1.html</id>
    <published>2021-02-04T13:11:03.000Z</published>
    <updated>2022-04-17T10:50:42.702Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;原文地址：&lt;a href=&quot;https://www.cnblogs.com/yc_sunniwell/archive/2010/07/14/1777432.html&quot;&gt;https://www.cnblogs.com/yc_sunniwell/archive/2010/07/14/1777432.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;近日在读操作系统导论，看到书中的代码里面有volatile 关键字，找到了一篇不错的文章，所以转载了过来。&lt;/p&gt;
&lt;h1 id=&quot;为什么用volatile&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#为什么用volatile&quot;&gt;&lt;/a&gt; 为什么用volatile?&lt;/h1&gt;
&lt;p&gt;C/C++ 中的 volatile 关键字和 const 对应，用来修饰变量，通常用于建立语言级别的 memory barrier。这是 BS 在 “The C++ Programming Language” 对 volatile 修饰词的说明：&lt;/p&gt;
&lt;p&gt;​		&lt;em&gt;A volatile specifier is a hint to a compiler that an object may change its value in ways not specified by the language so that aggressive optimizations must be avoided.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，比如：操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。声明时语法：&lt;strong&gt;int volatile vInt;&lt;/strong&gt; 当要求使用 volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被保存。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 其他代码，并未明确告诉编译器，对 i 进行过操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; b = i;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;volatile 指出 i 是随时可能发生变化的，每次使用它的时候必须从 i的地址中读取，因而编译器生成的汇编代码会重新从i的地址读取数据放在 b 中。而优化做法是，由于编译器发现两次从 i读数据的代码之间的代码没有对 i 进行过操作，它会自动把上次读的数据放在 b 中。而不是重新从 i 里面读。这样以来，如果 i是一个寄存器变量或者表示一个端口数据就容易出错，所以说 volatile 可以保证对特殊地址的稳定访问。注意，在 VC 6 中，一般调试模式没有进行代码优化，所以这个关键字的作用看不出来。下面通过插入汇编代码，测试有无 volatile 关键字，对程序最终代码的影响，输入下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;i = %d&quot;&lt;/span&gt;, a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 下面汇编语句的作用就是改变内存中 i 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 但是又不让编译器知道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __asm {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mov dword ptr [ebp&lt;span class=&quot;number&quot;&gt;-4&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; b = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;i = %d&quot;&lt;/span&gt;, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="language" scheme="http://tlhg.top/categories/language/"/>
    
    
    <category term="C++" scheme="http://tlhg.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>内存分配</title>
    <link href="http://tlhg.top/posts/9fa6.html"/>
    <id>http://tlhg.top/posts/9fa6.html</id>
    <published>2021-02-03T06:45:50.000Z</published>
    <updated>2021-02-15T07:17:52.447Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;内存分配与回收&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内存分配与回收&quot;&gt;&lt;/a&gt; 内存分配与回收&lt;/h1&gt;
&lt;h2 id=&quot;内存分配&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内存分配&quot;&gt;&lt;/a&gt; 内存分配&lt;/h2&gt;
&lt;p&gt;ExAllocatePoolWithTag(内存分配函数)&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PVOID &lt;span class=&quot;title function_&quot;&gt;ExAllocatePoolWithTag&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;	POOL_TYPE PoolType,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;    SIZE_T NumberOfBytes,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;    ULONG Tag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;PoolType&lt;/strong&gt; 为 POOL_TYPE 枚举类型，表示需要申请何种类型的内存。&lt;/p&gt;
&lt;p&gt;常用的值是 NonPagedPool 与 PagedPool，NonPagedPool表示非分页内存，PagedPool表示分页内存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;： 非分页内存是指这块内存的内容不会被置换到磁盘上，非分页内存非常宝贵，一般用于高IRQL（大于等于DISPATCH_LEVEL）的代码中。&lt;/p&gt;
&lt;p&gt;两个类型：NonPagedPoolExecute  与  NonPagedPoolNx&lt;br&gt;
NonPagedPoolNx类型是指分配出来的非分页内存不具备“可执行”属性。对非分页内存进行读写而不需要进行代码或指令执行，那么可以使用NonPagedPoolNx类型的内存&lt;/p&gt;
&lt;p&gt;NonPagedPoolExecute 类型与 NonPagedPool 类型等价。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NumberOfBytes&lt;/strong&gt;参数表示需要申请内存大小，单位是字节。&lt;/p&gt;</summary>
    
    
    
    <category term="kernel" scheme="http://tlhg.top/categories/kernel/"/>
    
    
    <category term="kernel programm" scheme="http://tlhg.top/tags/kernel-programm/"/>
    
  </entry>
  
  <entry>
    <title>自旋锁</title>
    <link href="http://tlhg.top/posts/e3da.html"/>
    <id>http://tlhg.top/posts/e3da.html</id>
    <published>2021-02-02T13:18:12.000Z</published>
    <updated>2021-02-14T13:03:47.723Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;自旋锁&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#自旋锁&quot;&gt;&lt;/a&gt; 自旋锁&lt;/h1&gt;
&lt;p&gt;自旋锁是内核中提供的一种高IRQL锁，用同步以及独占的方式访问某个资源。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KSPIN_LOCK my_spin_lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KeInitializeSpinLock(&amp;amp;my_spin_lock); &lt;span class=&quot;comment&quot;&gt;//函数无返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;自旋锁的使用方法：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KIRQL irql;		&lt;span class=&quot;comment&quot;&gt;//KIRQL是一个中断级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KeAcquireSpinLock(&amp;amp;my_spin_lock,&amp;amp;irql);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// To do something ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KeReleaseSpinLock(&amp;amp;my_spin_lock,irql);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;KeAcquireSpinLock 和 KeReleaseSpinLock 之间的代码是只有单线程执行的，其他的线程会停留在 KeAcquireSpinLock 等候，直到 KeReleaseSpinLock 被调用。换句话说，只有一个线程能够获得自旋锁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;： 锁一般不会定义成局部变量，可以使用静态变量、全局变量，或者分配在池（POOL）中。因为每个线程来执行的时候都会重新初始化一个锁。只有所有的线程共用一个锁，锁才有意义。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*正确使用自旋锁的例子*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KSPIN_LOCK my_spin_lock = {&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Void &lt;span class=&quot;title function_&quot;&gt;InitSpinLock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    KeInitializeSpinLock(&amp;amp;my_spin_lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Void &lt;span class=&quot;title function_&quot;&gt;MySafeFunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    KIRQL irql;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    KeAcquireSpinlock(&amp;amp;my_spin_lock,&amp;amp;irql);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// To do something...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    KeRealeaseSpinLock(&amp;amp;my_spin_lock,irql);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;双向链表自旋锁&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#双向链表自旋锁&quot;&gt;&lt;/a&gt; 双向链表自旋锁&lt;/h1&gt;
&lt;p&gt;在双向链表中使用自旋锁的目的是保证多线程安全。在操作链表之前，调用KeAcquireSpinLock 来获取锁，在操作完成之后，调用 KeReleaseSpinLock 来释放锁。&lt;/p&gt;</summary>
    
    
    
    <category term="kernel" scheme="http://tlhg.top/categories/kernel/"/>
    
    
    <category term="kernel programm" scheme="http://tlhg.top/tags/kernel-programm/"/>
    
  </entry>
  
  <entry>
    <title>LIST_ENTRY</title>
    <link href="http://tlhg.top/posts/2587.html"/>
    <id>http://tlhg.top/posts/2587.html</id>
    <published>2021-02-02T08:30:30.000Z</published>
    <updated>2021-02-14T12:03:21.176Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;链表的定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#链表的定义&quot;&gt;&lt;/a&gt; 链表的定义：&lt;/h1&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;LIST_ENTRY&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;LIST_ENTRY&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;Flink&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;LIST_ENTRY&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;Blink&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}LIST_ENTRY, *PLIST_ENTRY;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;LIST_ENTRY表示一个链表的节点，其中Flink成员指向当前节点的后一个节点，Blink成员指向当前节点的前一个节点。&lt;/p&gt;
&lt;p&gt;链表的使用：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;TestListEntry&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ULONG m_ulDataA;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ULONG m_ulDataB;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LIST_ENTRY m_ListEntry;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*双向链表节点的结构，m_ListEntry可以放在结构体的任意位置*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ULONG m_ulDataC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ULONG m_ulDataD;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}TestListEntry, *PTestListEntry;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;m_ulDataA成员处于最低地址，m_ulDataD处于最高地址，而链表节点LIST_ENTRY的两个成员展开后在结构体中分别为Flink与Blink，其中Flink处于低地址，Blink处于高地址。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/tlhg-0/blogimage/images/20210202175751.jpg&quot; alt=&quot;内存布局&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/tlhg-0/blogimage/images/20210202175817.jpg&quot; alt=&quot;节点的关系&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/tlhg-0/blogimage/images/20210202180503.jpg&quot; alt=&quot;包含头结点&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;头结点初始化&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#头结点初始化&quot;&gt;&lt;/a&gt; 头结点初始化&lt;/h1&gt;</summary>
    
    
    
    <category term="kernel" scheme="http://tlhg.top/categories/kernel/"/>
    
    
    <category term="kernel programm" scheme="http://tlhg.top/tags/kernel-programm/"/>
    
  </entry>
  
  <entry>
    <title>UNICODE_STRING</title>
    <link href="http://tlhg.top/posts/b83c.html"/>
    <id>http://tlhg.top/posts/b83c.html</id>
    <published>2021-02-02T07:36:10.000Z</published>
    <updated>2021-02-15T08:03:07.538Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;unicode_string数据类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#unicode_string数据类型&quot;&gt;&lt;/a&gt; UNICODE_STRING数据类型&lt;/h1&gt;
&lt;p&gt;内核层编程一般不直接使用WCHAR类型的Unicode字符串，而是使用UNICODE_STRING类型来表示Unicode。&lt;/p&gt;
&lt;p&gt;这里简单介绍一下 UNICODE_STRING 类型。&lt;/p&gt;
&lt;p&gt;UNICODE_STRING是内核中表示字符串的结构体；&lt;/p&gt;
&lt;p&gt;Buffer为一个指针，指向一个UNICODE类型的字符串缓冲区；&lt;/p&gt;
&lt;p&gt;MaximumLength表示Buffer所指向缓冲区的总空间大小，一般等于Buffer被分配时的内存大小，单位为字节；&lt;/p&gt;
&lt;p&gt;Length表示Buffer所指向缓冲区中字符串的长度，单位也是字节；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：Buffer指向的字符串，并不要求以’\0’作为结束，在大多数情况下，Buffer指向的字符串没有以’\0’结尾&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;UNICODE_STRING&lt;/span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       USHORT Length; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       USHORT MaximumLength; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       PWSTR Buffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}UNICODE_STRING, *PUNICODE_STRING;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;unicode_string-初始化&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#unicode_string-初始化&quot;&gt;&lt;/a&gt; UNICODE_STRING 初始化&lt;/h1&gt;</summary>
    
    
    
    <category term="kernel" scheme="http://tlhg.top/categories/kernel/"/>
    
    
    <category term="kernel programm" scheme="http://tlhg.top/tags/kernel-programm/"/>
    
  </entry>
  
  <entry>
    <title>C++ Calculator</title>
    <link href="http://tlhg.top/posts/190e.html"/>
    <id>http://tlhg.top/posts/190e.html</id>
    <published>2021-02-01T10:38:46.000Z</published>
    <updated>2021-02-02T10:49:03.766Z</updated>
    
    
    <summary type="html">&lt;p&gt;《The C++ Programming Language》 第六章函数的一个例子。&lt;/p&gt;
&lt;p&gt;没有高深的算法，都是c++中最常用的语法现象，但是这150行程序里蕴含的功力极深（至少我达不到这种水平，程序的效率，存储开销等方面做的都非常出色，甚至是天衣无缝）。&lt;/p&gt;
&lt;p&gt;今日贴出，请大家一同欣赏（作者在程序中因为简化程序而改写了一些更好的方法，正如作者在序言中所说，要有一种健康的怀疑态度,我之所以说它完美，并不是指我们编不出比它好的程序，而是指它清晰的结构，合理的设计，以及蕴含在这里面的编程艺术）&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;////////////////////////////////////////////////////////////// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//以下是 c++之父写的一个简单计算器程序 包括分析器,输入,符号表,驱动程序 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//计算器的输入语法: &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1)以 &quot;;&quot; 号作为一行的结束 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2)可用英文单词命名变量 (但变量后要有空格) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 例子如下: &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输入: r =2.5; (注意空格) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出: 2.5 (记负值结果) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输入: area = r * r * pi ; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出: 19.635 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 以下代码为标准c++代码,我在vc++2003.net上运行无误 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;cctype&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; std; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ture=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flase=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map&amp;lt;string,&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;&amp;gt; table; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/////////////////////////////////////////////////////////////// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//计算器输入允许的词法 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Token_value&lt;/span&gt;{ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NAME, NUMBER, END, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PLUS=&lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;, MINUS=&lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;, MUL=&lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;, DIV=&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PRINT=&lt;span class=&quot;string&quot;&gt;&#39;;&#39;&lt;/span&gt;, ASSIGN=&lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt;, LP=&lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;, RP=&lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/////////////////////////////////////////////////////////////// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//分析器 加和减 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/////////////////////////////////////////////////////////////// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//分析器 乘和除 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/////////////////////////////////////////////////////////////// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//分析器 处理初等项 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prim&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/////////////////////////////////////////////////////////////// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//词法分析器 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Token_value &lt;span class=&quot;title&quot;&gt;get_token&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/////////////////////////////////////////////////////////////// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//错误处理 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; string &amp;amp;s)&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/////////////////////////////////////////////////////////////// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//当前词法标记 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Token_value curr_tok=PRINT; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; number_value;  &lt;span class=&quot;comment&quot;&gt;//存放数值 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string string_value; &lt;span class=&quot;comment&quot;&gt;//存放计算器变量名 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; no_of_errors; &lt;span class=&quot;comment&quot;&gt;//记录错误个数 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; get)&lt;/span&gt; &lt;/span&gt;{ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; left=&lt;span class=&quot;built_in&quot;&gt;term&lt;/span&gt;( get); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;( ; ; ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(curr_tok) { &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; PLUS: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            left+=&lt;span class=&quot;built_in&quot;&gt;term&lt;/span&gt;(ture); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MINUS: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            left-=&lt;span class=&quot;built_in&quot;&gt;term&lt;/span&gt;(ture); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; left; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    } &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;} &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; get)&lt;/span&gt; &lt;/span&gt;{ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; left=&lt;span class=&quot;built_in&quot;&gt;prim&lt;/span&gt;(get); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;( ; ; ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(curr_tok) { &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MUL: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            left*=&lt;span class=&quot;built_in&quot;&gt;prim&lt;/span&gt;(ture); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; DIV: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; d=&lt;span class=&quot;built_in&quot;&gt;prim&lt;/span&gt;(ture)) { &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                left/=d; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            } &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;divide by 0&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; left; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    } &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;} &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prim&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; get)&lt;/span&gt; &lt;/span&gt;{ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(get) &lt;span class=&quot;built_in&quot;&gt;get_token&lt;/span&gt;(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(curr_tok) { &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; NUMBER: { &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; v=number_value; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;get_token&lt;/span&gt;(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 } &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; NAME: { &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;&amp;amp; v=table[string_value]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;get_token&lt;/span&gt;()==ASSIGN) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            v=&lt;span class=&quot;built_in&quot;&gt;expr&lt;/span&gt;(ture); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               } &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MINUS: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;built_in&quot;&gt;prim&lt;/span&gt;(ture); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; LP: { &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; e=&lt;span class=&quot;built_in&quot;&gt;expr&lt;/span&gt;(ture); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(curr_tok!=RP) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;) expected&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;get_token&lt;/span&gt;(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; e; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             } &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;primary expected&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    } &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;} &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Token_value &lt;span class=&quot;title&quot;&gt;get_token&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; ch=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cin&amp;gt;&amp;gt;ch; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(ch) { &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; curr_tok=END; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;;&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; curr_tok=&lt;span class=&quot;built_in&quot;&gt;Token_value&lt;/span&gt;(ch); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cin.&lt;span class=&quot;built_in&quot;&gt;putback&lt;/span&gt;(ch); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cin&amp;gt;&amp;gt;number_value; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; curr_tok=NUMBER; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;isalpha&lt;/span&gt;(ch)) { &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cin.&lt;span class=&quot;built_in&quot;&gt;putback&lt;/span&gt;(ch); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cin&amp;gt;&amp;gt;string_value; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; curr_tok=NAME; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        } &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;bad token&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; curr_tok=PRINT; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    } &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;} &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; string&amp;amp; s)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    no_of_errors++; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cerr&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;error: &quot;&lt;/span&gt;&amp;lt;&amp;lt;s&amp;lt;&amp;lt;endl; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;} &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    table[&lt;span class=&quot;string&quot;&gt;&quot;pi&quot;&lt;/span&gt;]=&lt;span class=&quot;number&quot;&gt;3.1415926&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    table[&lt;span class=&quot;string&quot;&gt;&quot;e&quot;&lt;/span&gt;]=&lt;span class=&quot;number&quot;&gt;2.718281828&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(cin) { &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;get_token&lt;/span&gt;(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(curr_tok==END) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(curr_tok==PRINT) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cout&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;expr&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&amp;lt;&amp;lt;endl; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    } &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; no_of_errors; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt;</summary>
    
    
    
    <category term="language" scheme="http://tlhg.top/categories/language/"/>
    
    
    <category term="C++" scheme="http://tlhg.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Git Command List</title>
    <link href="http://tlhg.top/posts/5a5a.html"/>
    <id>http://tlhg.top/posts/5a5a.html</id>
    <published>2020-11-17T11:13:33.000Z</published>
    <updated>2020-11-17T11:41:37.769Z</updated>
    
    
    <summary type="html">&lt;p&gt;常用 Git 命令清单。几个专用名词的译名如下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Workspace：工作区
Index / Stage：暂存区
Repository：仓库区（或本地仓库）
Remote：远程仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;新建代码库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#新建代码库&quot;&gt;&lt;/a&gt; 新建代码库&lt;/h1&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 在当前目录新建一个Git代码库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 新建一个目录，将其初始化为Git代码库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git init [project-name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 下载一个项目和它的整个代码历史&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git clone [url]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;配置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#配置&quot;&gt;&lt;/a&gt; 配置&lt;/h1&gt;
&lt;p&gt;Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 显示当前的Git配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 编辑Git配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config -e [--global]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 设置提交代码时的用户信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config [--global] user.name &quot;[name]&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config [--global] user.email &quot;[email address]&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;增加删除文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#增加删除文件&quot;&gt;&lt;/a&gt; 增加/删除文件&lt;/h1&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 添加指定文件到暂存区&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git add [file1] [file2] ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 添加指定目录到暂存区，包括子目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git add [dir]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 添加当前目录的所有文件到暂存区&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 添加每个变化前，都会要求确认&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 对于同一个文件的多处变化，可以实现分次提交&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git add -p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 删除工作区文件，并且将这次删除放入暂存区&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git rm [file1] [file2] ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 停止追踪指定文件，但该文件会保留在工作区&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git rm --cached [file]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 改名文件，并且将这个改名放入暂存区&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git mv [file-original] [file-renamed]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;代码提交&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码提交&quot;&gt;&lt;/a&gt; 代码提交&lt;/h1&gt;</summary>
    
    
    
    <category term="tools" scheme="http://tlhg.top/categories/tools/"/>
    
    
    <category term="get" scheme="http://tlhg.top/tags/get/"/>
    
  </entry>
  
  <entry>
    <title>单链表的反转</title>
    <link href="http://tlhg.top/posts/f962.html"/>
    <id>http://tlhg.top/posts/f962.html</id>
    <published>2020-10-25T06:42:39.000Z</published>
    <updated>2021-02-02T12:30:22.542Z</updated>
    
    
    <summary type="html">&lt;p&gt;反转链表：将链表整体“反过来”，将头变成尾、尾变成头。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/tlhg-0/blogimage/images/20201025144559.png&quot; alt=&quot;反转的链表&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/tlhg-0/blogimage/images/20201025144605.png&quot; alt=&quot;反转后的链表&quot;&gt;&lt;/p&gt;
&lt;p&gt;常见的四种方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;迭代反转法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归反转法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;就地逆置法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;头插法&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;递归反转法更适用于反转不带头节点的链表；其它 3 种方法既能反转不带头节点的链表，也能反转带头节点的链表。&lt;/p&gt;
&lt;h1 id=&quot;迭代反转链表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#迭代反转链表&quot;&gt;&lt;/a&gt; 迭代反转链表&lt;/h1&gt;
&lt;p&gt;方法：从当前链表的首元节点开始，一直遍历至链表的最后一个节点，这期间会逐个改变所遍历到的节点的指针域，另其指向前一个节点。&lt;/p&gt;
&lt;p&gt;具体实现：借助 3 个指针即可。首先我们定义 3 个指针并分别命名为 beg、mid、end。它们的初始指向如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/tlhg-0/blogimage/images/20201025145917.png&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="http://tlhg.top/categories/Algorithm/"/>
    
    
    <category term="Data Structure" scheme="http://tlhg.top/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="http://tlhg.top/posts/82e6.html"/>
    <id>http://tlhg.top/posts/82e6.html</id>
    <published>2020-10-25T02:09:03.000Z</published>
    <updated>2021-02-02T08:26:48.460Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;顺序表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#顺序表&quot;&gt;&lt;/a&gt; 顺序表&lt;/h1&gt;
&lt;h2 id=&quot;顺序表初始化&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#顺序表初始化&quot;&gt;&lt;/a&gt; 顺序表初始化&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定义数据表&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顺序表申请的存储容量；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顺序表的长度，也就是表中存储数据元素的个数；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Table&lt;/span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; * head;&lt;span class=&quot;comment&quot;&gt;//声明了一个名为head的长度不确定的数组，也叫“动态数组”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; length;&lt;span class=&quot;comment&quot;&gt;//记录当前顺序表的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; size;&lt;span class=&quot;comment&quot;&gt;//记录顺序表分配的存储容量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：head 是我们声明的一个未初始化的动态数组，不要只把它看做是普通的指针。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据表的初始化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;给 head 动态数据申请足够大小的物理空间；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给 size 和 length 赋初值；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; Size 5 &lt;span class=&quot;comment&quot;&gt;//对Size进行宏定义，表示顺序表申请空间的大小&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;table &lt;span class=&quot;title function_&quot;&gt;initTable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    table t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.head=(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;*)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(Size*&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;span class=&quot;comment&quot;&gt;//构造一个空的顺序表，动态申请存储空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!t.head) &lt;span class=&quot;comment&quot;&gt;//如果申请失败，作出提示并直接退出程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;初始化失败&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.length=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//空表的长度初始化为0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.size=Size;&lt;span class=&quot;comment&quot;&gt;//空表的初始存储空间为Size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;顺序表初始化的过程被封装到了一个函数中，此函数返回值是一个已经初始化完成的顺序表。这样做的好处是增加了代码的可用性，也更加美观。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="http://tlhg.top/categories/Algorithm/"/>
    
    
    <category term="Data Structure" scheme="http://tlhg.top/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Function call Convention</title>
    <link href="http://tlhg.top/posts/a251.html"/>
    <id>http://tlhg.top/posts/a251.html</id>
    <published>2020-10-18T09:12:13.000Z</published>
    <updated>2021-02-02T08:24:56.205Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;cdecl&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cdecl&quot;&gt;&lt;/a&gt; cdecl&lt;/h2&gt;
&lt;p&gt;cdecl是C语言中使用的调用方式，调用者负责处理栈&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;stdio.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (a+b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *argv[]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;})&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/tlhg-0/blogimage/images/20201018182131.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/tlhg-0/blogimage/images/20201018182416.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;在调用完add() 函数之后，使用 ADD ESP,8 命令整理栈。调用者 main() 函数直接清理其压入栈的函数参数，这样的方式叫 cdecl。&lt;/p&gt;
&lt;p&gt;cdecl 调用的优点：可以向调用函数传递长度可变的参数，这种长度可变的参数在其他调用中很难实现。&lt;/p&gt;
&lt;h2 id=&quot;stdcall&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#stdcall&quot;&gt;&lt;/a&gt; stdcall&lt;/h2&gt;
&lt;p&gt;stdcll是 win32 API常用的调用方式，被调用者负责清理栈。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;stdio.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; _stdcall &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (a+b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *argv[]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;})&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Reverse" scheme="http://tlhg.top/categories/Reverse/"/>
    
    
    <category term="Reverse" scheme="http://tlhg.top/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Stack frame</title>
    <link href="http://tlhg.top/posts/a7dd.html"/>
    <id>http://tlhg.top/posts/a7dd.html</id>
    <published>2020-10-17T11:46:50.000Z</published>
    <updated>2021-02-02T08:26:33.432Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是栈帧&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是栈帧&quot;&gt;&lt;/a&gt; 什么是栈帧&lt;/h2&gt;
&lt;p&gt;栈帧就是利用EBP（栈帧指针，注意不是ESP）寄存器访问栈内局部变量，参数，函数返回地址的手段，在IA-32寄存器中，ESP寄存器承担着栈顶指针的作用，而EBP寄存器则负责行使栈帧指针的职能。&lt;/p&gt;
&lt;p&gt;但是在程序运行的过程中，ESP寄存器的值随时发生变化，访问栈中函数的局部变量，参数时候，若以ESP值为基准编写程序会产生困难，并且难使CPU引用到准确的值。所以引入了栈帧。&lt;/p&gt;
&lt;p&gt;在调用某些函数时，先要把用作基准点（函数起始地址）的ESP值保存到EBP，并维持在函数内部，这样无论ESP的值如何变化，以EBP的值作为基准（base）就能够安全访问到相关函数的局部变量，参数，返回地址。&lt;/p&gt;
&lt;h2 id=&quot;分析栈帧&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分析栈帧&quot;&gt;&lt;/a&gt; 分析栈帧&lt;/h2&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;stdio.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; a, &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; x = a ,y = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (x + y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(a, b));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/tlhg-0/blogimage/images/20201018115721.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;main() 函数产生栈帧&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;*argv[])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;00401020         55                    push ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00401021         8BEC                  mov ebp,esp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Reverse" scheme="http://tlhg.top/categories/Reverse/"/>
    
    
    <category term="Reverse" scheme="http://tlhg.top/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>IA-32 register</title>
    <link href="http://tlhg.top/posts/1a06.html"/>
    <id>http://tlhg.top/posts/1a06.html</id>
    <published>2020-10-16T14:54:54.000Z</published>
    <updated>2021-02-02T08:27:17.583Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;基本程序运行寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通用寄存器 （General Purpse Resigisters,32位，8个）&lt;/p&gt;
&lt;p&gt;段寄存器 （Segment Register，16位，6个）&lt;/p&gt;
&lt;p&gt;程序状态与控制寄存器 （Program Status and Contral Register,32位，1个）&lt;/p&gt;
&lt;p&gt;指令指针寄存器（Instruction Pointer， 32位，1个）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通用寄存器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;EAX:（针对操作数和结果数据的） 累加器&lt;/p&gt;
&lt;p&gt;EBX：（DS段中的数据指针）基址寄存器&lt;/p&gt;
&lt;p&gt;ECX：（字符串和循环操作的）计数器&lt;/p&gt;
&lt;p&gt;EDX （I/O指针）数据寄存器&lt;/p&gt;</summary>
    
    
    
    <category term="Reverse" scheme="http://tlhg.top/categories/Reverse/"/>
    
    
    <category term="Reverse" scheme="http://tlhg.top/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://tlhg.top/posts/a89f.html"/>
    <id>http://tlhg.top/posts/a89f.html</id>
    <published>2020-09-27T14:49:24.000Z</published>
    <updated>2020-11-19T13:32:38.410Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;创建版本库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#创建版本库&quot;&gt;&lt;/a&gt; 创建版本库&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;选择一个合适的地方，创建一个空目录：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;figcaption&gt;&lt;span&gt;bash&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir learngit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd learngit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/michael/learngit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;通过&lt;code&gt;git init&lt;/code&gt;命令把这个目录变成Git可以管理的仓库：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;figcaption&gt;&lt;span&gt;bash&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Initialized empty Git repository in /Users/michael/learngit/.git/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在文件夹目录下面会出现一个 .git 的目录，这个目录的作用是Git来跟踪版本管理库的，对于该文件夹下面的文件修改要慎重，盲目修改可能会导致版本库出现问题。&lt;br&gt;
如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。&lt;br&gt;
也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将文件提交到仓库的步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用命令&lt;code&gt;git add&lt;/code&gt;告诉Git，把文件添加到仓库：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;figcaption&gt;&lt;span&gt;bash&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git add readme.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="http://tlhg.top/categories/tools/"/>
    
    
    <category term="get" scheme="http://tlhg.top/tags/get/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX公式-Katex解析</title>
    <link href="http://tlhg.top/posts/6d4d.html"/>
    <id>http://tlhg.top/posts/6d4d.html</id>
    <published>2020-08-09T11:41:13.000Z</published>
    <updated>2021-02-02T08:27:15.771Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概念&quot;&gt;&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;LaTeX是一种基于ΤΕΧ的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80年代初期开发，利用这种格式，即使使用者没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学类文档。&lt;/p&gt;
&lt;p&gt;MathJax是一个显示网络上数学公式的开源JavaScript引擎库，它可以在所有浏览器上面工作，其中就支持LaTeX，MathML和AsciiMath 符号，里面的数字会被MathJax使用JavaScript引擎解析成HTML，SVG或者是MathML 方程式，然后在现代的浏览器里面显示。 它的设计目标是利用最新的web技术，构建一个支持math的web平台。支持主要的浏览器和操作系统,包括那些移动设备&lt;/p&gt;
&lt;p&gt;KaTeX： 可汗学院出品，号称“最快”的数学公式渲染库&lt;br&gt;
支持主流的浏览器：Chrome, Firefox, Safari, Opera和 IE8-IE11。&lt;/p&gt;
&lt;p&gt;快速：并发渲染，无需重排页面。根据这个测试，性能绝对秒杀MathJax； +渲染效果好：采用TeX语法，渲染效果达到印刷出版级别； +无依赖：不依赖其它库； +支持服务器端渲染：例如，服务器端的Node.js程序调用KaTeX，把渲染好的HTML片段直接发送给客户端。&lt;/p&gt;
&lt;h2 id=&quot;在线测试工具&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#在线测试工具&quot;&gt;&lt;/a&gt; 在线测试工具&lt;/h2&gt;
&lt;p&gt;在线测试，我们可以进行latex公式、katex效果一一对应&lt;br&gt;
&lt;a href=&quot;http://pandao.github.io/editor.md/examples/katex.html&quot;&gt;http://pandao.github.io/editor.md/examples/katex.html&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://latex.codecogs.com/eqneditor/editor.php&quot;&gt;http://latex.codecogs.com/eqneditor/editor.php&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://latex.91maths.com/&quot;&gt;http://latex.91maths.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;latex公式&lt;br&gt;
参考文档：&lt;br&gt;
&lt;a href=&quot;http://www.mohu.org/info/lshort-cn.pdf&quot;&gt;http://www.mohu.org/info/lshort-cn.pdf&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;空白&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1_1多个连续的空白字符等同为一个空白字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1_2每行开始的空白字符将被忽略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1_3使用空行来结束段落，两行文本中的空行标志上一段落的结束和&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;新段落的开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#空格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用\quad和\qquad 来表示空格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#特殊字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;前面需要添加\来表示特殊字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ %  &amp;amp; _ { } # ^ ~ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;语法对应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\$ \%  \&amp;amp; \_ \{ \}  \# &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\~{}  \^{}(测试有问题)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#指数上下标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;指数可以用x^a 或者x^{a} 格式来表示,x代表底数，a是指数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;下标可以用x_{a}格式来表示,x代表底数,a代表下指数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#下标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a1(a的下标标为1)   表达式：a_{1}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#指数(上标)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x2(x的指数为2)   表达式：x^2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#上下标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b3ij(b的上标为3下标为ij)  表达式：b^{3}_{ij}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#多次上标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ex2(e的上标为x的平方)  表达式：{e^x}^2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#平方根&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;平方根命令为：\sqrt，n 次方根相应地为: \sqrt[n]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x开根号  表达式：\sqrt{x} &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x开三次方根  表达式：\sqrt[3]{x} &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对x平方+根号y在开平方：表达式\sqrt{x^{2}+ \sqrt{y}}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#分数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;分数使用\frac{a}{b} 排版,a是分子，b是分母&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例子如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\frac{x^2}{k+1}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x^{\frac{2}{k+1}}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x^{1/2}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#向量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;向量由\vec 得到。另两个命令\overrightarrow 和\overleftarrow在定义从A 到B 的向量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#求和运算符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;求和运算符由\sum 生成&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\sum_{i=1}^{n}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#数学运算符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;大于：&amp;gt;  小于：&amp;lt;  小于等于：\le  大于等于：\ge  不等于：\ne  双波浪线：\approx  单波浪线：\sim  子集：\subseteq  属于：\in  不属于：\notin  乘号：\times  除号：\div  加减号：\pm  右双箭头\Rightarrow 右单箭头：\rightarrow  无穷大：\infty   角度斜度\angle &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#常用小写希腊字母&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\alpha \beta \gamma \sigma \omega \delta \pi \rho \epsilon \eta \lambda \mu \xi \tau \kappa \zeta \phi \chi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e^{2}\neq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#小括号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;空格式：\left (  \right )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;效果：()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有数据的括号格式：\left ( 123,45 \right )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;效果：(123,45)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#中括号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;空格式：\left [  \right ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;效果：[]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有数据的括号格式：\left [ 3,5,9 \right ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;效果：[3,5,9]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#尖括号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;空数据格式：\left \langle  \right \rangle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有数据格式：\left \langle 3,4 \right \rangle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;3,4&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#水平线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用 \overline 和 \underline 在表达式的上、下方画出水平线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\overline{lindexi.oschina.io}+\underline{lindexi.github.io}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#上大括号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用\overbrace 和 \underbrace 可以在表达式上方、下方添加花括号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\overbrace{blog.csdn.net/lindexi_gd}_{lindexi} + \underbrace{lindexi.github.io}_{doubi}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#三角函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\sin\theta &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\cos\theta &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\tan\theta &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\cot \theta&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;katex前端展示latex数学公式效果&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#katex前端展示latex数学公式效果&quot;&gt;&lt;/a&gt; katex前端展示latex数学公式效果&lt;/h2&gt;</summary>
    
    
    
    <category term="tools" scheme="http://tlhg.top/categories/tools/"/>
    
    
    <category term="LaTex" scheme="http://tlhg.top/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>EOP 脱壳常用方法</title>
    <link href="http://tlhg.top/posts/cbad.html"/>
    <id>http://tlhg.top/posts/cbad.html</id>
    <published>2020-07-01T05:22:20.000Z</published>
    <updated>2021-02-02T08:26:29.478Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;0x1-oep&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x1-oep&quot;&gt;&lt;/a&gt; 0X1 OEP&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;OEP：(Original Entry Point)，程序的入口点，软件加壳就是隐藏了OEP（或者用了假的OEP）， 只要我们找到程序真正的OEP，就可以立刻脱壳。&lt;/p&gt;
&lt;p&gt;PUSHAD （压栈） 代表程序的入口点&lt;/p&gt;
&lt;p&gt;POPAD （出栈） 代表程序的出口点&lt;/p&gt;
&lt;p&gt;POPAD与PUSHAD相对应，一般找到这个OEP就在附近啦。&lt;/p&gt;
&lt;h1 id=&quot;0x2-常见寻找oep脱壳的方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x2-常见寻找oep脱壳的方法&quot;&gt;&lt;/a&gt; 0x2 常见寻找OEP脱壳的方法&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;方法一&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#方法一&quot;&gt;&lt;/a&gt; 方法一：&lt;/h2&gt;
&lt;p&gt;1.用OD载入，不分析代码！&lt;/p&gt;</summary>
    
    
    
    <category term="Reverse" scheme="http://tlhg.top/categories/Reverse/"/>
    
    
    <category term="Shelling method" scheme="http://tlhg.top/tags/Shelling-method/"/>
    
  </entry>
  
  <entry>
    <title>获取Windosw系统信息批处理脚本</title>
    <link href="http://tlhg.top/posts/3763.html"/>
    <id>http://tlhg.top/posts/3763.html</id>
    <published>2020-06-17T08:25:04.000Z</published>
    <updated>2021-06-17T08:28:37.207Z</updated>
    
    
    <summary type="html">&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; off&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; System Information &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systeminfo | &lt;span class=&quot;built_in&quot;&gt;findstr&lt;/span&gt; /B /C:&quot;OS&quot; &amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Hostname &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hostname &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Users&amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;net&lt;/span&gt; users &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Route table &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;route &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Netstat INformation&amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netstat -ano &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Firewall State &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netsh firewall show state &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Firewall configuration &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netsh firewall show config &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Scheduled tasks &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;schtasks /query /fo LIST /v &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; tasklist &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tasklist /SVC &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt; &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt; &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; driverquery &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DRIVERQUERY &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Wmic hotfix &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wmic qfe get Caption,Description,HotFixID,InstalledOn &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; reg queries - elavated &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; reg queries - elavated &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sc qc Spooler &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;accesschk.exe -ucqv Spooler &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;accesschk.exe -uwcqv &quot;Authenticated Users&quot; * &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; upnhosts - elavated &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sc qc upnphost &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; End of Script &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; --------------------------------------------------------------------------------------------------- &amp;gt;&amp;gt; System_Details.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt;</summary>
    
    
    
    <category term="System" scheme="http://tlhg.top/categories/System/"/>
    
    
    <category term="Crack" scheme="http://tlhg.top/tags/Crack/"/>
    
  </entry>
  
  <entry>
    <title>VS Code edit background</title>
    <link href="http://tlhg.top/posts/7060.html"/>
    <id>http://tlhg.top/posts/7060.html</id>
    <published>2020-05-29T06:19:19.000Z</published>
    <updated>2020-08-07T13:25:28.145Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;  今天用VS Code 写代码，感觉背景有点单调，所以决定美化一下（美名其曰美化，其实是偷偷摸鱼），网上大部分教程都是使用background插件来自定义vscode的背景图，这种方法需要在配置文件中配置一下，但是折腾完了发现这个方法不是很对我的胃口。&lt;/p&gt;
&lt;p&gt;​	 这是在使用过程中出现的一些问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在VS Code窗口右下角会有警告提示，虽然可以手动关闭，但是我不喜欢。&lt;/li&gt;
&lt;li&gt;背景图只能覆盖代码区，左侧菜单区是不能覆盖的。&lt;/li&gt;
&lt;li&gt;VS Code更新后，配置文件setting.json下修改的适应背景的配置代码会消失。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;  感兴趣的小伙伴可以去百度一下教程，我在这里就不在赘述了，这里着重介绍第二种方法：修改一下vscode的源css文件。&lt;/p&gt;
&lt;p&gt;**ps：**background插件在删除的时候，会自动删除添加的样式（依赖node环境）。&lt;br&gt;
如果没有node环境，需要在 settings.json 中设置 {“background.enabled”: false} ，然后再删除插件。如果直接删除插件会有遗留，就需要重装vscode了。&lt;/p&gt;
&lt;p&gt;这里先把效果图放一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/tlhg-0/blogimage/images/20200529162132.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;如何实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#如何实现&quot;&gt;&lt;/a&gt; 如何实现&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进入VS Code的源文件下面，找到 workbench.desktop.main.css 文件，文件地址  E:\Microsoft VS Code\resources\app\out\vs\workbench  （我的VS Code安装在E盘下）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/tlhg-0/blogimage/images/J(OZ_WI@QE67%7BAU)59~7RZW.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任意的编译器打开workbench.desktop.main.css 文件，可以插入源代码中，也可以直接写在末尾位置，添加body{}，这一步也就是在css中写入配置文件，修改添加到背景的图片的相关信息，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;11px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  user-select: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;pointer-events&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;: cover;    //详见说明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0.75&lt;/span&gt;;             //透明度修改，注意这里图片和代码文字都能会被透明度影响&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;file:///F:/picture/wallpaper/cartoon/大姐姐.png&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;99999&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-repeat&lt;/span&gt;: no-repeat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="tools" scheme="http://tlhg.top/categories/tools/"/>
    
    
    <category term="VS Code" scheme="http://tlhg.top/tags/VS-Code/"/>
    
  </entry>
  
</feed>
